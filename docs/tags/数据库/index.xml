<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on steeeeps</title>
    <link>https://steeeeps.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on steeeeps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© steeeeps</copyright>
    <lastBuildDate>Thu, 09 Nov 2017 23:08:29 +0000</lastBuildDate><atom:link href="https://steeeeps.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>高可用数据库架构设计</title>
      <link>https://steeeeps.github.io/posts/2017/ha-database/</link>
      <pubDate>Thu, 09 Nov 2017 23:08:29 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2017/ha-database/</guid>
      <description>高可用性这个名词可能做 web 开发的同学听的也比较多。
一般 web 系统的高可用性可以通过集群部署加负载均衡的技术来实现。但是由于数据库的特殊性，除了使用集群部署和负载均衡的技术之外，更重要的是如何保持数据库之间的数据统一性。
数据库同步机制有很多种，用较多的就是主从流复制机制。
主从流复制机制 Postgresql 在9.0之后引入了主从的流复制机制，包含一个主库和从库，所谓流复制，就是从库通过 tcp 流从主库同步相应的数据，主要有以下特点：
 从服务器通过TCP流从主服务器中实时同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。 PostgreSQL流复制默认是异步的。 在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。 主服务器支持读写，插入数据或删除数据，在从服务器上能看到相应的变化。但从服务器上只能读，不能写。  postgres 自带的主从流复制机制虽然实现了数据的同步与备份，确保了数据的统一性，但是没有提供负载均衡能力，所以还是没有实现数据库的高可用性。要实现数据库的高可用性，还需要引入第三方框架 pgpool。
Pgpool pgpool 是一个位于 postgresql 服务器和客户端之间的中间件，是 pg 集群开源实现中比较成功的项目之一。它主要提供下面几个功能：
 连接池：pgpool-II 保持已经连接到 PostgreSQL 服务器的连接， 并在使用相同参数（例如：用户名，数据库，协议版本） 连接进来时重用它们。 它减少了连接开销，并增加了系统的总体吞吐量。 复制：pgpool-II 可以管理多个 PostgreSQL 服务器。 激活复制功能并使在2台或者更多 PostgreSQL 节点中建立一个实时备份成为可能， 这样，如果其中一台节点失效，服务可以不被中断继续运行。 负载均衡：如果数据库进行了复制（可能运行在复制模式或者主备模式下）， 则在任何一台服务器中执行一个 SELECT 查询将返回相同的结果。 pgpool-II 利用了复制的功能以降低每台 PostgreSQL 服务器的负载。 它通过分发 SELECT 查询到所有可用的服务器中，增强了系统的整体吞吐量。在理想的情况下，读性能应该和 PostgreSQL 服务器的数量成正比。 负载均衡功能在有大量用户同时执行很多只读查询的场景中工作的效果最好。 限制超过限度的连接：PostgreSQL 会限制当前的最大连接数，当到达这个数量时，新的连接将被拒绝。增加这个最大连接数会增加资源消耗并且对系统的全局性能有一定的负面影响。 pgpoo-II 也支持限制最大连接数，但它的做法是将连接放入队列，而不是立即返回一个错误。 并行查询：使用并行查询时，数据可以被分割到多台服务器上， 所以一个查询可以在多台服务器上同时执行，以减少总体执行时间。并行查询在查询大规模数据的时候非常有效。  这样就可以通过在PG自身提供的流复制机制的搭建主从结构集群上，使用Pgpool提供的连接池、负载均衡、自动故障切换等功能，来实现数据库的高可用性架构能力。
当然负载均衡只针对读操作，写操作只发生在主节点上。为了避免单点故障，Pgpool自身也可以配置为主从结构，对外提供虚拟IP地址，当主节点故障后，从节点提升为新的主节点并接管虚拟IP。
架构图  参考自：</description>
    </item>
    
    <item>
      <title>数据库性能优化(三)—数据库表分区</title>
      <link>https://steeeeps.github.io/posts/2017/database-optimization-table-partition/</link>
      <pubDate>Thu, 09 Nov 2017 22:58:29 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2017/database-optimization-table-partition/</guid>
      <description>当对 sql 语句也做了优化，同事对数据表也建立了相应的索引后，数据库的整体查询性能能提高不少。但是随着系统的运行我们又会遇见其他问题。
我相信大家在开发过程中也都遇见过这种场景：随着使用时间的增加，数据库中的数据量也不断增加，因此数据库查询越来越慢。而且许多数据是历史数据并且随着时间的推移它们的重要性逐渐降低，可能很少会用到，但是这些数据又不能删除，所以如果能找到一个办法将这些可能不太重要的数据隐藏，数据库查询速度将会大幅提高。
比如说我们的系统运行日志，还有车辆轨迹监控数据。都存在这种问题。因此，就需要一个高效的把历史数据从当前查询中隐藏起来并且不造成数据丢失的方法。而数据库表分区就能达到这样的效果。
数据库表分区含义 数据库表分区指的是把大的物理表分成若干个小的物理表，并使得这些小物理表在逻辑上可以被当成一张表来使用。
分区表有一张主表和若干子表组成，主表是正常的普通表，但正常情况下并不存储任何数据，子表继承并属于主表，用来存储具体的数据。如下图所示：
数据库表分区优势  在特定场景下，查询性能极大提高，尤其是当大部分经常访问的数据记录在一个或少数几个分区表上时。表分区减小了索引的大小，并使得常访问的分区表的索引更容易保存于内存中。 当查询或者更新访问一个或少数几个分区表中的大部分数据时，可以通过顺序扫描该分区表而非使用大表索引来提高性能。 可通过添加或移除分区表来高效的批量增删数据。如可使用ALTERTABLE NO INHERIT可将特定分区从主逻辑表中移除（该表依然存在，并可单独使用，只是与主表不再有继承关系并无法再通过主表访问该分区表），或使用DROPTABLE直接将该分区表删除。这两种方式完全避免了使用DELETE时所需的VACUUM额外代价。 很少使用的数据可被迁移到便宜些的慢些的存储介质中   数据库表分区详细内容与具体实现，参考http://www.jasongj.com/2015/12/13/SQL3_partition/
 </description>
    </item>
    
    <item>
      <title>数据库性能优化(二)—索引的使用</title>
      <link>https://steeeeps.github.io/posts/2017/database-optimization-index/</link>
      <pubDate>Thu, 09 Nov 2017 22:48:29 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2017/database-optimization-index/</guid>
      <description>当数据库查询越来越慢，或者涉及到大数据的查询时，除了 SQL 语句优化，索引也是数据库性能优化中最常见的手段之一。
什么是索引 索引是对数据库中一列或者几列的数据按照特定的数据结构进行排序保存的一种方式，使用索引可以加快数据库查询 或排序时的速度。
索引优点 它主要有以下几点优点：
 可以大大提高数据查询的速度。 在实现数据的参考完整性方面，可以加快表和表之间的连接。 在分组和排序时，可以减少分组和排序的时间。  索引缺点 但是事务都是有两面性的，索引在使用过程中也会有一定的缺陷，比如：
 创建和维护索引需要耗费时间，数据量越大耗费时间也越长。 索引需要占用额外的磁盘空间，如果数据量很大又有大量索引，那么索引文件大小增加很快。 对表中数据改动的时候，索引需要动态维护，降低了数据操作的速度。  索引类型 在PostgreSQL中提供了多种索引类型： B-tree、Hash、GiST、SP-GiST 、GIN 和 BRIN。每一种索引类型使用了一种不同的算法来适应不同类型的查询。默认情况下， pg 中 CREATE INDEX命令创建的索引都属于B-tree 索引。
索引方式 在postgresql中索引有以下几种方式：
  多列索引：多列索引指的是一个索引可以定义在表的多个列上。这个应该是最常见的，我们根据查询的条件，在某个列上或者多个列上添加索引。
  排序索引：除了简单的查找需要返回的行外，还可以按照指定的顺序将数据返回，这样就使得查询中的 order by 语句不需要独立的排序步骤。这个在什么地方用到了，就是我们查询分页的时候，order by 与 limit 联合使用时，如果有一个符合 order by 的排序索引，前n行将会被直接获取且根本不需要扫描剩下的数据。如果没有这个索引的话，解析器就会扫描全表的数据进行排序，然后返回指定页数的数据。所以如果有分页的表，可以试一下这个排序索引。
  组合索引：前面也讲了，一般在查询条件中只有使用 AND 才能使用单一索引，而使用 or 数据库会放弃使用索引而进行全表扫描。所以Postgresql 提供了组合多个索引的能力来处理查询条件使用 and 或者 or 的查询。也包括统一查询中多次使用同一个索引的能力。
 比如 WHERE x = 42 OR x = 47 OR x = 53 OR x = 99 和 WHERE x = 5 AND y = 6。</description>
    </item>
    
    <item>
      <title>数据库性能优化(一)—SQL 语句优化</title>
      <link>https://steeeeps.github.io/posts/2017/database-optimization-sql/</link>
      <pubDate>Thu, 09 Nov 2017 22:38:29 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2017/database-optimization-sql/</guid>
      <description>SQL 语句优化 在系统开发和系统运行过程中，随着数据库中数据量越来越大的时候，应用程序与数据库查询越来越慢，这时候我们通常都会首先想到去做一些数据库的性能优化相关的工作，而这方面的工作首先想到也最最容易做的就是SQL 语句优化。
sql 语句优化总结了最常见的下面这几条，虽然说是 sql 语句的优化，但是 sql 查询和索引是分不开的，所以这些优化的建议很多也是建立在索引的基础上的。
主要包括一下几点：
  对查询进行优化，应尽量避免全表扫描，首先应考虑在where 及 order by涉及的列上建立索引。
  应尽量避免在where子句中使用!=或&amp;lt;&amp;gt;操作符，否则引擎将放弃使用索引而进行全表扫描。
 (因为SQL只对&amp;lt;，&amp;lt;=，=，&amp;gt;，&amp;gt;=，BETWEEN，IN，以及某些时候的LIKE才会使用索引)
   应尽量避免在where 子句中对字段进行 null值判断，否则将导致引擎放弃使用索引而进行全表扫描。
 如： select id from t where num isnull 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t wherenum=0
   应尽量避免在where 子句中使用 or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。
 如： select id from t where num=10 ornum=20 可以这样查询： select id from t wherenum=10 union all select id from t where num=20</description>
    </item>
    
  </channel>
</rss>
