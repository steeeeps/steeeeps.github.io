<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员 on steeeeps</title>
    <link>https://steeeeps.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
    <description>Recent content in 程序员 on steeeeps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© steeeeps</copyright>
    <lastBuildDate>Tue, 20 Aug 2013 10:58:03 +0000</lastBuildDate><atom:link href="https://steeeeps.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>程序员的困境</title>
      <link>https://steeeeps.github.io/posts/2013/programmers-dilemma/</link>
      <pubDate>Tue, 20 Aug 2013 10:58:03 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2013/programmers-dilemma/</guid>
      <description>最近我面试了十位应聘内核工程师的求职者，这些求职者都是来自于以芯片或嵌入式系统
闻名的大的、有名气的公司。他们中大多数都声称自己在内核开发方面有至少10年的工作经验。他们的简历看起来也相当漂亮——各种相关的项目经验,流行词汇和奖项…
但是他们中的大多数都不能回答一个相当基础的问题：**当我们访问一个标准的内存分配函数时，在内核中发生了什么？ **
不要感到惊讶。当我叫其中一个应聘者基于glib哈希函数写一个简单的LRU缓存框架时，他首先声称他自己从未使用过glib，然后我打开glib的api页面，详细的给他解释了这些api，差不多一个小时之后，他仅仅写了几行乱七八糟的代码。
我不知道在其他国家是否也有相似的情况，但是在中国，或者更明确一点，在北京，这是非常真实的，在大的、著名的外企有多年工作经验的”高级“程序员在简单的，基础问题上都不能证明自己。
**为什么会发生这种情况? **
我越是思考这件事，就越觉得这种情况不仅是有他们自己造成的，而且还和他们工作的公司有关。这些公司通常都能提供更固定的代码，通常多年都不会有显著的变化。这些代码需要的技术包含了职员需要掌握的技能，所以他们只需要按照现有的方式固步自封，而不是勇于创新。如果你一旦长时间的照着这样的代码工作而很少与外界交流，最终你会发现自己处于一个可怜的位置—在团队或者公司里，大家称呼你为“专家”，然而不幸的是，你不能在市场上找到一个同样好的工作。
这就是所谓的“专家陷阱”，我们程序员天天都梦想着能成为团队或公司里的专家，但是当梦想成真的时候我们却将自己困了起来。对现有代码专研的越深，我们也陷的越深。我们逐渐失去了从零开始完成一个完整项目的能力，因为现有的代码是非常稳定(如此大的结构/如此大的效益)的.更糟糕的是，如果我们主要的工作仅仅是维护现有的代码和小功能的开发，过不了多久，我们会发现，无论我们阅读、学习了多少代码，我们会发现我们就连像毕业生作业般简单的代码都不会写。这就是程序员困境：我们依靠代码为生，但所在的大公司却常常摧毁我们求生的能力。
如何避免这种困境？
对程序员而言
首先，做自己的项目。你需要不间断地自我提升。如果工作不能帮助你完成这一点，找出你想要征服的难点并使用你私人时间来完成。通过这样做,你很可能会学到新的知识。如果你发布个人项目，例如发布到github上，你就有机会认识能够带你脱离困境的朋友。
不要在同一团队超过两年。强制自己做出改变，即使在同一部门、同一公司，你也能够面临新的挑战和新的技术。试着每18个月参加一些面试。你不需要换工作，但是你能够了解市场需求以及如何适应。
对团队/公司而言
给职员压力和挑战。循环团队的任务，使“专家”有机会拓宽他们的技能，启动新的项目，让大家充满竞争感。
定期举行黑客马拉松。这样有助于建立一种拥抱创新和创造的文化。大家会相互激发积极性——“我靠，那个大牛能在24小时内写出如此漂亮的框架，我必须得努力了”。
 本文翻译自：Programmer’s dilemma
 </description>
    </item>
    
    <item>
      <title>不要节省敲打引号的时间</title>
      <link>https://steeeeps.github.io/posts/2013/code-in-standard/</link>
      <pubDate>Mon, 03 Jun 2013 11:02:36 +0000</pubDate>
      
      <guid>https://steeeeps.github.io/posts/2013/code-in-standard/</guid>
      <description>上周五准备下班的时候，系统在chrome下运行点击某一个按钮没反应，查看控制台，发现抛出这样一个错误：
 Uncaught SyntaxError: Unexpected token ILLEGAL
 以前遇见过，感觉也就是标点符号一类的输入不正确，于是开着eclipse开始查看这个页面以及和这个页面相关的js代码，但是一看这几个页面的svn提交日期居然都是3月20多号，而且自己也隐约能够记得，周四检验功能的时候，系统的确是没有问题的。
我的脑海中开始浮现程序员常说的话：
  昨天还好好的 我好几个星期都没碰这块代码了！ … …   我开始思考用哪句话来面对这个突如其来的难题…
虽然如此，但是在产品等着发布的压力之下，我也只有硬着头皮开始一步一步的查看同事休假遗留下来的代码。从html到javascript，一行代码一行代码的仔细检查，均没有发现问题。
于是我又开始使用chrome开发者工具一点一点分析页面解析过的代码，终于发现了一段类似于这样的代码：
&amp;lt;div onclick=&amp;#34;alert(&amp;#39;错误&amp;#34; 用法&amp;#39;)&amp;gt;错误用法&amp;lt;/div&amp;gt; 而**原文件中的代码**是这样的:``` html&amp;lt;div onclick=alert(&#39;错误 用法&#39;)&amp;gt;错误用法&amp;lt;/div&amp;gt;``` 现在已经很明显了，问题就出在源码里onclick事件调用alert函数传入一个带空格的参数，并且注册onclick事件时没有加引号所引起的。
但是，在HTML5中，对于标签的属性的确是可以不用加引号的，浏览器会自动解析并且添加引号，这一点是没有错的。主要错误的原因就是：传递给函数的参数是程序通过ajax请求，从数据库中获取的，比如参数a，然后再将a作为参数传入函数中。当a为一个不包含空格的词时，整个程序运行perfect。但是当a中间包含一个或多个空格时，并且注册事件没有使用引号，这时按照浏览器的解析原则，就出现了文中所描述的错误。
我想，当时编写这个代码的同事，在检验功能时，数据库返回的参数a应该是没有空格的，当自己根据HTML5中这个规则添加属性时，肯定还在偷着乐，HTML5真方便…
很多程序员都想用最短的时间敲最多的代码、完成最多的功能，包括我。所以很多时候我们都会去忽略一些规范，比如最简单的命名规范，从而达到快速。当然，忽略命名规范是肯定不会出现文中这个错误。但是为了程序的健壮性，为了对以后维护代码的程序员负责，不要节省敲打引号的时间，不要轻易的忽略编程的规范性。
突然想起一句话：码农何必为难码农!</description>
    </item>
    
  </channel>
</rss>
